import hashlib
import json
from time import time


class Blockchain:
    def __init__(self):
        # Initialize the blockchain with an empty list of blocks and transactions
        self.chain = []
        self.current_transactions = []

        # Create the genesis block when the blockchain is initialized
        self.new_block(previous_hash='1', proof=100)

    def new_block(self, proof, previous_hash=None):
        """
        Create a new Block in the Blockchain

        :param proof: <int> The proof given by the Proof of Work algorithm
        :param previous_hash: (Optional) <str> Hash of previous Block
        :return: <dict> New Block
        """

        # Define a new block with its attributes
        block = {
            'index': len(self.chain) + 1,         # Index of the block in the blockchain
            'timestamp': time(),                   # Timestamp when the block is created
            'transactions': self.current_transactions,  # List of transactions included in the block
            'proof': proof,                        # Proof generated by the Proof of Work algorithm
            'previous_hash': previous_hash or self.hash(self.chain[-1]),  # Hash of the previous block
        }

        # Reset the list of current transactions as they are included in the block
        self.current_transactions = []

        # Append the new block to the blockchain
        self.chain.append(block)
        return block

    def new_transaction(self, sender, recipient, amount):
        """
        Creates a new transaction to go into the next mined Block

        :param sender: <str> Address of the Sender
        :param recipient: <str> Address of the Recipient
        :param amount: <int> Amount
        :return: <int> The index of the Block that will hold this transaction
        """
        # Add a new transaction to the list of current transactions
        self.current_transactions.append({
            'sender': sender,
            'recipient': recipient,
            'amount': amount,
        })

        return self.last_block['index'] + 1

    @staticmethod
    def hash(block):
        """
        Creates a SHA-256 hash of a Block

        :param block: <dict> Block
        :return: <str>
        """

        # Serialize the block dictionary and convert it to a string
        block_string = json.dumps(block, sort_keys=True).encode()
        # Generate the SHA-256 hash of the serialized block string
        return hashlib.sha256(block_string).hexdigest()

    @property
    def last_block(self):
        # Return the last block in the blockchain
        return self.chain[-1]

    def proof_of_work(self, last_proof):
        """
        Simple Proof of Work Algorithm:
         - Find a number p' such that hash(pp') contains leading 4 zeroes, where p is the previous p'
         - p is the previous proof, and p' is the new proof

        :param last_proof: <int>
        :return: <int>
        """
        proof = 0
        while self.valid_proof(last_proof, proof) is False:
            proof += 1

        return proof

    @staticmethod
    def valid_proof(last_proof, proof):
        """
        Validates the Proof: Does hash(last_proof, proof) contain 4 leading zeroes?

        :param last_proof: <int> Previous Proof
        :param proof: <int> Current Proof
        :return: <bool> True if correct, False if not.
        """
        # Concatenate the previous proof and the new proof
        guess = f'{last_proof}{proof}'.encode()
        # Generate the SHA-256 hash of the concatenated proofs
        guess_hash = hashlib.sha256(guess).hexdigest()
        # Check if the hash contains 4 leading zeroes
        return guess_hash[:4] == "0000"


# Example usage
blockchain = Blockchain()

print("Mining Genesis Block...")
# Add some transactions to the blockchain
blockchain.new_transaction("Satoshi", "Mike", 10)
#blockchain.new_transaction("Mike", "Satoshi", 5)
#blockchain.new_transaction("Satoshi", "Hal Finney", 1)
#blockchain.new_transaction("Hal Finney", "Mike", 2)

# Mine the genesis block
last_block = blockchain.last_block
last_proof = last_block['proof']
proof = blockchain.proof_of_work(last_proof)
blockchain.new_block(proof)

# Print the whole blockchain
for block in blockchain.chain:
    print("Block:", block)
